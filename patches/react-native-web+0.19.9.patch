diff --git a/node_modules/react-native-web/dist/cjs/exports/Alert/index.js b/node_modules/react-native-web/dist/cjs/exports/Alert/index.js
index 6a30655..95f0d34 100644
--- a/node_modules/react-native-web/dist/cjs/exports/Alert/index.js
+++ b/node_modules/react-native-web/dist/cjs/exports/Alert/index.js
@@ -1,19 +1,90 @@
 "use strict";
 
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
 exports.__esModule = true;
 exports.default = void 0;
-/**
- * Copyright (c) Nicolas Gallagher.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * 
- */
-
+var _sweetalert = _interopRequireDefault(require("sweetalert2"));
+var DEFAULT_CONFIRM_BUTTON = {
+  style: 'confirm',
+  text: 'OK'
+};
 class Alert {
-  static alert() {}
+  static alert(title, message, buttons, options) {
+    if (buttons === void 0) {
+      buttons = [DEFAULT_CONFIRM_BUTTON];
+    }
+    if (options === void 0) {
+      options = {};
+    }
+    var confirmButton = buttons.find(button => !button.style || button.style === 'confirm');
+    var denyButton = buttons.find(button => button.style === 'destructive');
+    var cancelButton = buttons.find(button => button.style === 'cancel');
+    var resolveButtonClass = buttonType => {
+      var classes = "alert-" + buttonType;
+      if (buttons.length === 3) {
+        classes = classes + ' full-width button-height';
+
+        // Cancel button is always the last button in this case and we don't the want border there.
+        if (buttonType !== "cancel") {
+          classes = classes + ' border-bottom';
+        }
+      } else if (buttons.length === 2) {
+        classes = classes + ' half-width';
+
+        // Cancel button is the last in this case and we want first button to have border-right only.
+        if (buttonType === "confirm" || buttonType === 'deny') {
+          classes = classes + ' border-right';
+        }
+      } else {
+        classes = classes + ' full-width';
+      }
+      return classes;
+    };
+    _sweetalert.default.fire({
+      title,
+      text: message,
+      animation: false,
+      showConfirmButton: true,
+      showDenyButton: !!denyButton,
+      showCancelButton: !!cancelButton,
+      confirmButtonText: confirmButton == null ? void 0 : confirmButton.text,
+      denyButtonText: denyButton == null ? void 0 : denyButton.text,
+      cancelButtonText: cancelButton == null ? void 0 : cancelButton.text,
+      width: '20em',
+      background: '#f7f7f7',
+      confirmButtonColor: 'transparent',
+      cancelButtonColor: 'transparent',
+      denyButtonColor: 'transparent',
+      customClass: {
+        container: 'alert-container',
+        popup: 'alert-popup',
+        title: 'alert-title',
+        actions: 'alert-actions',
+        confirmButton: resolveButtonClass("confirm"),
+        cancelButton: resolveButtonClass("cancel"),
+        denyButton: resolveButtonClass("deny")
+      }
+    }).then(result => {
+      if (result.isConfirmed) {
+        if ((confirmButton == null ? void 0 : confirmButton.onPress) !== undefined) {
+          confirmButton.onPress();
+        }
+      } else if (result.isDenied) {
+        if ((denyButton == null ? void 0 : denyButton.onPress) !== undefined) {
+          denyButton.onPress();
+        }
+      } else if (result.isDismissed) {
+        // Android Alert supports onDismiss callback. It is preferred over cancel button onPress.
+        if (options.onDismiss !== undefined) {
+          options.onDismiss();
+          return;
+        }
+        if ((cancelButton == null ? void 0 : cancelButton.onPress) !== undefined) {
+          cancelButton.onPress();
+        }
+      }
+    });
+  }
 }
-var _default = Alert;
-exports.default = _default;
+var _default = exports.default = Alert;
 module.exports = exports.default;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/exports/Animated/useAnimatedValue.js b/node_modules/react-native-web/dist/cjs/exports/Animated/useAnimatedValue.js
new file mode 100644
index 0000000..c8dc222
--- /dev/null
+++ b/node_modules/react-native-web/dist/cjs/exports/Animated/useAnimatedValue.js
@@ -0,0 +1,29 @@
+"use strict";
+
+var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
+exports.__esModule = true;
+exports.default = void 0;
+var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
+var _react = require("react");
+var _Animated = _interopRequireDefault(require("../../vendor/react-native/Animated/Animated"));
+var useAnimatedValue = function useAnimatedValue(toValue, options) {
+  if (options === void 0) {
+    options = {};
+  }
+  var _options = options,
+    _options$method = _options.method,
+    method = _options$method === void 0 ? 'timing' : _options$method,
+    _options$animationCon = _options.animationConfig,
+    animationConfig = _options$animationCon === void 0 ? {} : _options$animationCon,
+    interpolationConfig = _options.interpolationConfig;
+  var animatedValue = (0, _react.useRef)(new _Animated.default.Value(toValue)).current;
+  (0, _react.useEffect)(() => {
+    _Animated.default[method](animatedValue, (0, _objectSpread2.default)({
+      toValue
+    }, animationConfig)).start();
+  }, [toValue]); // eslint-disable-line react-hooks/exhaustive-deps
+
+  return interpolationConfig ? animatedValue.interpolate(interpolationConfig) : animatedValue;
+};
+var _default = exports.default = useAnimatedValue;
+module.exports = exports.default;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/exports/Share/index.js b/node_modules/react-native-web/dist/cjs/exports/Share/index.js
index 963c4a8..b3f2832 100644
--- a/node_modules/react-native-web/dist/cjs/exports/Share/index.js
+++ b/node_modules/react-native-web/dist/cjs/exports/Share/index.js
@@ -49,6 +49,5 @@ class Share {
     return 'dismissedAction';
   }
 }
-var _default = Share;
-exports.default = _default;
+var _default = exports.default = Share;
 module.exports = exports.default;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/exports/Switch/index.js b/node_modules/react-native-web/dist/cjs/exports/Switch/index.js
index 52ed948..c08f478 100644
--- a/node_modules/react-native-web/dist/cjs/exports/Switch/index.js
+++ b/node_modules/react-native-web/dist/cjs/exports/Switch/index.js
@@ -13,6 +13,14 @@ var _multiplyStyleLengthValue = _interopRequireDefault(require("../../modules/mu
 var _StyleSheet = _interopRequireDefault(require("../StyleSheet"));
 var _View = _interopRequireDefault(require("../View"));
 var _excluded = ["aria-label", "accessibilityLabel", "activeThumbColor", "activeTrackColor", "disabled", "onValueChange", "style", "thumbColor", "trackColor", "value"];
+/**
+ * Copyright (c) Nicolas Gallagher.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * 
+ */
 var emptyObject = {};
 var thumbDefaultBoxShadow = '0px 1px 3px rgba(0,0,0,0.5)';
 var thumbFocusedBoxShadow = thumbDefaultBoxShadow + ", 0 0 0 10px rgba(0,0,0,0.1)";
@@ -53,7 +61,7 @@ var Switch = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
   var _StyleSheet$flatten = _StyleSheet.default.flatten(style),
     styleHeight = _StyleSheet$flatten.height,
     styleWidth = _StyleSheet$flatten.width;
-  var height = styleHeight || '20px';
+  var height = styleHeight || '26px';
   var minWidth = (0, _multiplyStyleLengthValue.default)(height, 2);
   var width = styleWidth > minWidth ? styleWidth : minWidth;
   var trackBorderRadius = (0, _multiplyStyleLengthValue.default)(height, 0.5);
@@ -155,10 +163,11 @@ var styles = _StyleSheet.default.create({
   track: (0, _objectSpread2.default)((0, _objectSpread2.default)({
     forcedColorAdjust: 'none'
   }, _StyleSheet.default.absoluteFillObject), {}, {
-    height: '70%',
+    height: '105%',
     margin: 'auto',
-    transitionDuration: '0.1s',
-    width: '100%'
+    transitionDuration: '0.3s',
+    width: '90%',
+    marginLeft: 6
   }),
   thumb: {
     forcedColorAdjust: 'none',
@@ -167,7 +176,7 @@ var styles = _StyleSheet.default.create({
     boxShadow: thumbDefaultBoxShadow,
     start: '0%',
     transform: 'translateZ(0)',
-    transitionDuration: '0.1s'
+    transitionDuration: '0.3s'
   },
   thumbActive: {
     insetInlineStart: '100%'
@@ -180,6 +189,5 @@ var styles = _StyleSheet.default.create({
     width: '100%'
   })
 });
-var _default = Switch;
-exports.default = _default;
+var _default = exports.default = Switch;
 module.exports = exports.default;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/cjs/index.js b/node_modules/react-native-web/dist/cjs/index.js
index b696270..ddb9f0a 100644
--- a/node_modules/react-native-web/dist/cjs/index.js
+++ b/node_modules/react-native-web/dist/cjs/index.js
@@ -2,7 +2,7 @@
 
 var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
 exports.__esModule = true;
-exports.useWindowDimensions = exports.useLocaleContext = exports.useColorScheme = exports.unstable_createElement = exports.unmountComponentAtNode = exports.render = exports.processColor = exports.findNodeHandle = exports.YellowBox = exports.VirtualizedList = exports.View = exports.Vibration = exports.UIManager = exports.TouchableWithoutFeedback = exports.TouchableOpacity = exports.TouchableNativeFeedback = exports.TouchableHighlight = exports.Touchable = exports.TextInput = exports.Text = exports.Switch = exports.StyleSheet = exports.StatusBar = exports.Share = exports.SectionList = exports.ScrollView = exports.SafeAreaView = exports.RefreshControl = exports.ProgressBar = exports.Pressable = exports.Platform = exports.PixelRatio = exports.Picker = exports.PanResponder = exports.NativeModules = exports.NativeEventEmitter = exports.Modal = exports.LogBox = exports.Linking = exports.LayoutAnimation = exports.KeyboardAvoidingView = exports.Keyboard = exports.InteractionManager = exports.ImageBackground = exports.Image = exports.I18nManager = exports.FlatList = exports.Easing = exports.Dimensions = exports.DeviceEventEmitter = exports.Clipboard = exports.CheckBox = exports.Button = exports.BackHandler = exports.Appearance = exports.AppState = exports.AppRegistry = exports.Animated = exports.Alert = exports.ActivityIndicator = exports.AccessibilityInfo = void 0;
+exports.useWindowDimensions = exports.useLocaleContext = exports.useColorScheme = exports.useAnimatedValue = exports.unstable_createElement = exports.unmountComponentAtNode = exports.render = exports.processColor = exports.findNodeHandle = exports.YellowBox = exports.VirtualizedList = exports.View = exports.Vibration = exports.UIManager = exports.TouchableWithoutFeedback = exports.TouchableOpacity = exports.TouchableNativeFeedback = exports.TouchableHighlight = exports.Touchable = exports.TextInput = exports.Text = exports.Switch = exports.StyleSheet = exports.StatusBar = exports.Share = exports.SectionList = exports.ScrollView = exports.SafeAreaView = exports.RefreshControl = exports.ProgressBar = exports.Pressable = exports.Platform = exports.PixelRatio = exports.Picker = exports.PanResponder = exports.NativeModules = exports.NativeEventEmitter = exports.NativeAppEventEmitter = exports.Modal = exports.LogBox = exports.Linking = exports.LayoutAnimation = exports.KeyboardAvoidingView = exports.Keyboard = exports.InteractionManager = exports.ImageBackground = exports.Image = exports.I18nManager = exports.FlatList = exports.Easing = exports.Dimensions = exports.DeviceEventEmitter = exports.Clipboard = exports.CheckBox = exports.Button = exports.BackHandler = exports.Appearance = exports.AppState = exports.AppRegistry = exports.Animated = exports.Alert = exports.ActivityIndicator = exports.AccessibilityInfo = void 0;
 var _createElement = _interopRequireDefault(require("./exports/createElement"));
 exports.unstable_createElement = _createElement.default;
 var _findNodeHandle = _interopRequireDefault(require("./exports/findNodeHandle"));
@@ -47,6 +47,7 @@ var _Linking = _interopRequireDefault(require("./exports/Linking"));
 exports.Linking = _Linking.default;
 var _NativeEventEmitter = _interopRequireDefault(require("./exports/NativeEventEmitter"));
 exports.NativeEventEmitter = _NativeEventEmitter.default;
+exports.NativeAppEventEmitter = _NativeEventEmitter.default;
 var _PanResponder = _interopRequireDefault(require("./exports/PanResponder"));
 exports.PanResponder = _PanResponder.default;
 var _PixelRatio = _interopRequireDefault(require("./exports/PixelRatio"));
@@ -125,3 +126,5 @@ var _useLocaleContext = _interopRequireDefault(require("./exports/useLocaleConte
 exports.useLocaleContext = _useLocaleContext.default;
 var _useWindowDimensions = _interopRequireDefault(require("./exports/useWindowDimensions"));
 exports.useWindowDimensions = _useWindowDimensions.default;
+var _useAnimatedValue = _interopRequireDefault(require("./exports/Animated/useAnimatedValue"));
+exports.useAnimatedValue = _useAnimatedValue.default;
diff --git a/node_modules/react-native-web/dist/exports/Alert/index.js b/node_modules/react-native-web/dist/exports/Alert/index.js
index 705bda5..d3ea698 100644
--- a/node_modules/react-native-web/dist/exports/Alert/index.js
+++ b/node_modules/react-native-web/dist/exports/Alert/index.js
@@ -1,13 +1,84 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * 
- */
-
+import Swal from 'sweetalert2';
+var DEFAULT_CONFIRM_BUTTON = {
+  style: 'confirm',
+  text: 'OK'
+};
 class Alert {
-  static alert() {}
+  static alert(title, message, buttons, options) {
+    if (buttons === void 0) {
+      buttons = [DEFAULT_CONFIRM_BUTTON];
+    }
+    if (options === void 0) {
+      options = {};
+    }
+    var confirmButton = buttons.find(button => !button.style || button.style === 'confirm');
+    var denyButton = buttons.find(button => button.style === 'destructive');
+    var cancelButton = buttons.find(button => button.style === 'cancel');
+    var resolveButtonClass = buttonType => {
+      var classes = "alert-" + buttonType;
+      if (buttons.length === 3) {
+        classes = classes + ' full-width button-height';
+
+        // Cancel button is always the last button in this case and we don't the want border there.
+        if (buttonType !== "cancel") {
+          classes = classes + ' border-bottom';
+        }
+      } else if (buttons.length === 2) {
+        classes = classes + ' half-width';
+
+        // Cancel button is the last in this case and we want first button to have border-right only.
+        if (buttonType === "confirm" || buttonType === 'deny') {
+          classes = classes + ' border-right';
+        }
+      } else {
+        classes = classes + ' full-width';
+      }
+      return classes;
+    };
+    Swal.fire({
+      title,
+      text: message,
+      animation: false,
+      showConfirmButton: true,
+      showDenyButton: !!denyButton,
+      showCancelButton: !!cancelButton,
+      confirmButtonText: confirmButton == null ? void 0 : confirmButton.text,
+      denyButtonText: denyButton == null ? void 0 : denyButton.text,
+      cancelButtonText: cancelButton == null ? void 0 : cancelButton.text,
+      width: '20em',
+      background: '#f7f7f7',
+      confirmButtonColor: 'transparent',
+      cancelButtonColor: 'transparent',
+      denyButtonColor: 'transparent',
+      customClass: {
+        container: 'alert-container',
+        popup: 'alert-popup',
+        title: 'alert-title',
+        actions: 'alert-actions',
+        confirmButton: resolveButtonClass("confirm"),
+        cancelButton: resolveButtonClass("cancel"),
+        denyButton: resolveButtonClass("deny")
+      }
+    }).then(result => {
+      if (result.isConfirmed) {
+        if ((confirmButton == null ? void 0 : confirmButton.onPress) !== undefined) {
+          confirmButton.onPress();
+        }
+      } else if (result.isDenied) {
+        if ((denyButton == null ? void 0 : denyButton.onPress) !== undefined) {
+          denyButton.onPress();
+        }
+      } else if (result.isDismissed) {
+        // Android Alert supports onDismiss callback. It is preferred over cancel button onPress.
+        if (options.onDismiss !== undefined) {
+          options.onDismiss();
+          return;
+        }
+        if ((cancelButton == null ? void 0 : cancelButton.onPress) !== undefined) {
+          cancelButton.onPress();
+        }
+      }
+    });
+  }
 }
 export default Alert;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/Animated/useAnimatedValue.js b/node_modules/react-native-web/dist/exports/Animated/useAnimatedValue.js
new file mode 100644
index 0000000..a078034
--- /dev/null
+++ b/node_modules/react-native-web/dist/exports/Animated/useAnimatedValue.js
@@ -0,0 +1,23 @@
+import _objectSpread from "@babel/runtime/helpers/objectSpread2";
+import { useEffect, useRef } from 'react';
+import Animated from '../../vendor/react-native/Animated/Animated';
+var useAnimatedValue = function useAnimatedValue(toValue, options) {
+  if (options === void 0) {
+    options = {};
+  }
+  var _options = options,
+    _options$method = _options.method,
+    method = _options$method === void 0 ? 'timing' : _options$method,
+    _options$animationCon = _options.animationConfig,
+    animationConfig = _options$animationCon === void 0 ? {} : _options$animationCon,
+    interpolationConfig = _options.interpolationConfig;
+  var animatedValue = useRef(new Animated.Value(toValue)).current;
+  useEffect(() => {
+    Animated[method](animatedValue, _objectSpread({
+      toValue
+    }, animationConfig)).start();
+  }, [toValue]); // eslint-disable-line react-hooks/exhaustive-deps
+
+  return interpolationConfig ? animatedValue.interpolate(interpolationConfig) : animatedValue;
+};
+export default useAnimatedValue;
\ No newline at end of file
diff --git a/node_modules/react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle.js b/node_modules/react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle.js
index dc4ffb9..b247fc9 100644
--- a/node_modules/react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle.js
+++ b/node_modules/react-native-web/dist/exports/StyleSheet/compiler/createReactDOMStyle.js
@@ -101,6 +101,10 @@ var createReactDOMStyle = (style, isInline) => {
         resolvedStyle.flexGrow = 0;
         resolvedStyle.flexShrink = 1;
         resolvedStyle.flexBasis = 'auto';
+      } else if (value === 0) {
+        resolvedStyle.flexGrow = 0;
+        resolvedStyle.flexShrink = 0;
+        resolvedStyle.flexBasis = 'auto';
       } else {
         resolvedStyle.flex = value;
       }
diff --git a/node_modules/react-native-web/dist/exports/Switch/index.js b/node_modules/react-native-web/dist/exports/Switch/index.js
index 38b96ed..e50f4c1 100644
--- a/node_modules/react-native-web/dist/exports/Switch/index.js
+++ b/node_modules/react-native-web/dist/exports/Switch/index.js
@@ -56,7 +56,7 @@ var Switch = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {
   var _StyleSheet$flatten = StyleSheet.flatten(style),
     styleHeight = _StyleSheet$flatten.height,
     styleWidth = _StyleSheet$flatten.width;
-  var height = styleHeight || '20px';
+  var height = styleHeight || '26px';
   var minWidth = multiplyStyleLengthValue(height, 2);
   var width = styleWidth > minWidth ? styleWidth : minWidth;
   var trackBorderRadius = multiplyStyleLengthValue(height, 0.5);
@@ -158,10 +158,11 @@ var styles = StyleSheet.create({
   track: _objectSpread(_objectSpread({
     forcedColorAdjust: 'none'
   }, StyleSheet.absoluteFillObject), {}, {
-    height: '70%',
+    height: '105%',
     margin: 'auto',
-    transitionDuration: '0.1s',
-    width: '100%'
+    transitionDuration: '0.3s',
+    width: '90%',
+    marginLeft: 6
   }),
   thumb: {
     forcedColorAdjust: 'none',
@@ -170,7 +171,7 @@ var styles = StyleSheet.create({
     boxShadow: thumbDefaultBoxShadow,
     start: '0%',
     transform: 'translateZ(0)',
-    transitionDuration: '0.1s'
+    transitionDuration: '0.3s'
   },
   thumbActive: {
     insetInlineStart: '100%'
diff --git a/node_modules/react-native-web/dist/index.js b/node_modules/react-native-web/dist/index.js
index 4f69987..38f180b 100644
--- a/node_modules/react-native-web/dist/index.js
+++ b/node_modules/react-native-web/dist/index.js
@@ -22,6 +22,7 @@ export { default as InteractionManager } from './exports/InteractionManager';
 export { default as LayoutAnimation } from './exports/LayoutAnimation';
 export { default as Linking } from './exports/Linking';
 export { default as NativeEventEmitter } from './exports/NativeEventEmitter';
+export { default as NativeAppEventEmitter } from './exports/NativeEventEmitter';
 export { default as PanResponder } from './exports/PanResponder';
 export { default as PixelRatio } from './exports/PixelRatio';
 export { default as Platform } from './exports/Platform';
@@ -67,3 +68,4 @@ export { default as DeviceEventEmitter } from './exports/DeviceEventEmitter';
 export { default as useColorScheme } from './exports/useColorScheme';
 export { default as useLocaleContext } from './exports/useLocaleContext';
 export { default as useWindowDimensions } from './exports/useWindowDimensions';
+export { default as useAnimatedValue } from './exports/Animated/useAnimatedValue';
diff --git a/node_modules/react-native-web/src/exports/Alert/index.js b/node_modules/react-native-web/src/exports/Alert/index.js
index 8abdf5c..2689e86 100644
--- a/node_modules/react-native-web/src/exports/Alert/index.js
+++ b/node_modules/react-native-web/src/exports/Alert/index.js
@@ -1,14 +1,83 @@
-/**
- * Copyright (c) Nicolas Gallagher.
- *
- * This source code is licensed under the MIT license found in the
- * LICENSE file in the root directory of this source tree.
- *
- * @flow
- */
+import Swal from 'sweetalert2';
+
+const DEFAULT_CONFIRM_BUTTON = {style: 'confirm', text: 'OK'};
 
 class Alert {
-  static alert() {}
+  static alert(title, message, buttons = [DEFAULT_CONFIRM_BUTTON], options = {}) {
+    const confirmButton = buttons.find(button => !button.style || button.style === 'confirm')
+    const denyButton = buttons.find(button => button.style === 'destructive')
+    const cancelButton = buttons.find(button => button.style === 'cancel')
+
+    const resolveButtonClass = (buttonType) => {
+      let classes = `alert-${buttonType}`
+
+      if (buttons.length === 3) {
+        classes = classes + ' full-width button-height'
+
+        // Cancel button is always the last button in this case and we don't the want border there.
+        if (buttonType !== "cancel") {
+          classes = classes + ' border-bottom';
+        }
+      } else if (buttons.length === 2) {
+        classes = classes + ' half-width'
+
+        // Cancel button is the last in this case and we want first button to have border-right only.
+        if (buttonType === "confirm" || buttonType === 'deny') {
+          classes = classes + ' border-right';
+        }
+      } else {
+        classes = classes + ' full-width'
+      }
+
+      return classes;
+    }
+
+    Swal.fire({
+      title,
+      text: message,
+      animation: false,
+      showConfirmButton: true,
+      showDenyButton: !!denyButton,
+      showCancelButton: !!cancelButton,
+      confirmButtonText: confirmButton?.text,
+      denyButtonText: denyButton?.text,
+      cancelButtonText: cancelButton?.text,
+      width: '20em',
+      background: '#f7f7f7',
+      confirmButtonColor: 'transparent',
+      cancelButtonColor: 'transparent',
+      denyButtonColor: 'transparent',
+      customClass: {
+        container: 'alert-container',
+        popup: 'alert-popup',
+        title: 'alert-title',
+        actions: 'alert-actions',
+        confirmButton: resolveButtonClass("confirm"),
+        cancelButton: resolveButtonClass("cancel"),
+        denyButton: resolveButtonClass("deny")
+      }
+    }).then(result => {
+      if (result.isConfirmed) {
+        if (confirmButton?.onPress !== undefined) {
+          confirmButton.onPress();
+        }
+      } else if (result.isDenied) {
+        if (denyButton?.onPress !== undefined) {
+          denyButton.onPress();
+        }
+      } else if (result.isDismissed) {
+        // Android Alert supports onDismiss callback. It is preferred over cancel button onPress.
+        if (options.onDismiss !== undefined) {
+          options.onDismiss();
+          return;
+        }
+        
+        if (cancelButton?.onPress !== undefined) {
+          cancelButton.onPress();
+        }
+      }
+    });
+  }
 }
 
 export default Alert;
diff --git a/node_modules/react-native-web/src/exports/Animated/useAnimatedValue.js b/node_modules/react-native-web/src/exports/Animated/useAnimatedValue.js
new file mode 100644
index 0000000..4c175ef
--- /dev/null
+++ b/node_modules/react-native-web/src/exports/Animated/useAnimatedValue.js
@@ -0,0 +1,22 @@
+import { useEffect, useRef } from 'react';
+import Animated from '../../vendor/react-native/Animated/Animated';
+
+const useAnimatedValue = (toValue, options = {}) => {
+  const { method = 'timing', animationConfig = {}, interpolationConfig } = options;
+
+  const animatedValue = useRef(new Animated.Value(toValue)).current;
+
+  useEffect(() => {
+    Animated[method](
+      animatedValue,
+      {
+        toValue,
+        ...animationConfig,
+      }
+    ).start();
+  }, [toValue]); // eslint-disable-line react-hooks/exhaustive-deps
+
+  return interpolationConfig ? animatedValue.interpolate(interpolationConfig) : animatedValue;
+};
+
+export default useAnimatedValue;
diff --git a/node_modules/react-native-web/src/exports/StyleSheet/compiler/createReactDOMStyle.js b/node_modules/react-native-web/src/exports/StyleSheet/compiler/createReactDOMStyle.js
index 6274527..510f2c4 100644
--- a/node_modules/react-native-web/src/exports/StyleSheet/compiler/createReactDOMStyle.js
+++ b/node_modules/react-native-web/src/exports/StyleSheet/compiler/createReactDOMStyle.js
@@ -139,6 +139,10 @@ const createReactDOMStyle = (style: Style, isInline?: boolean): Style => {
         resolvedStyle.flexGrow = 0;
         resolvedStyle.flexShrink = 1;
         resolvedStyle.flexBasis = 'auto';
+      } else if (value === 0) {
+        resolvedStyle.flexGrow = 0;
+        resolvedStyle.flexShrink = 0;
+        resolvedStyle.flexBasis = 'auto';
       } else {
         resolvedStyle.flex = value;
       }
diff --git a/node_modules/react-native-web/src/exports/Switch/index.js b/node_modules/react-native-web/src/exports/Switch/index.js
index 4f3e659..26bb320 100644
--- a/node_modules/react-native-web/src/exports/Switch/index.js
+++ b/node_modules/react-native-web/src/exports/Switch/index.js
@@ -74,7 +74,7 @@ const Switch: React.AbstractComponent<
   }
 
   const { height: styleHeight, width: styleWidth } = StyleSheet.flatten(style);
-  const height = styleHeight || '20px';
+  const height = styleHeight || '26px';
   const minWidth = multiplyStyleLengthValue(height, 2);
   const width = styleWidth > minWidth ? styleWidth : minWidth;
   const trackBorderRadius = multiplyStyleLengthValue(height, 0.5);
@@ -204,10 +204,11 @@ const styles = StyleSheet.create({
   track: {
     forcedColorAdjust: 'none',
     ...StyleSheet.absoluteFillObject,
-    height: '70%',
+    height: '105%',
     margin: 'auto',
-    transitionDuration: '0.1s',
-    width: '100%'
+    transitionDuration: '0.3s',
+    width: '90%',
+    marginLeft: 6
   },
   thumb: {
     forcedColorAdjust: 'none',
@@ -216,7 +217,7 @@ const styles = StyleSheet.create({
     boxShadow: thumbDefaultBoxShadow,
     start: '0%',
     transform: 'translateZ(0)',
-    transitionDuration: '0.1s'
+    transitionDuration: '0.3s'
   },
   thumbActive: {
     insetInlineStart: '100%'
diff --git a/node_modules/react-native-web/src/index.js b/node_modules/react-native-web/src/index.js
index f1a6f23..e28ad76 100644
--- a/node_modules/react-native-web/src/index.js
+++ b/node_modules/react-native-web/src/index.js
@@ -23,6 +23,7 @@ export { default as InteractionManager } from './exports/InteractionManager';
 export { default as LayoutAnimation } from './exports/LayoutAnimation';
 export { default as Linking } from './exports/Linking';
 export { default as NativeEventEmitter } from './exports/NativeEventEmitter';
+export { default as NativeAppEventEmitter } from './exports/NativeEventEmitter';
 export { default as PanResponder } from './exports/PanResponder';
 export { default as PixelRatio } from './exports/PixelRatio';
 export { default as Platform } from './exports/Platform';
@@ -68,3 +69,4 @@ export { default as DeviceEventEmitter } from './exports/DeviceEventEmitter';
 export { default as useColorScheme } from './exports/useColorScheme';
 export { default as useLocaleContext } from './exports/useLocaleContext';
 export { default as useWindowDimensions } from './exports/useWindowDimensions';
+export { default as useAnimatedValue } from './exports/Animated/useAnimatedValue';
